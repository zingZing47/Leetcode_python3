class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        # open < n 
        # close < open
        # finally: open == close == n
        res = []

        def backtrack(openN, closeN, path):
            if openN == closeN == n:
                res.append(path)
                return
            
            if openN < n:
                backtrack(openN + 1, closeN, path + "(")
            
            if closeN < openN:  
                backtrack(openN,closeN+1, path + ")")

        backtrack(0,0,"")
        return res
