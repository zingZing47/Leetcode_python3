# Solution: Hashmap & 2 pointers
# Time: o(n^2) 2 iterations + o(nlogn) sort the list, Space o(n) create a hashmap
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        res = []
        nums.sort()
        # iterate the array to find distinctive 'a'  
        # Skip to the next if the value is same
        
        for i, a in enumerate(nums):
            if i > 0 and a == nums[i-1]:
                continue 

            l,r = i+1, len(nums)-1
            while l<r:
                threesum = a+ nums[l] + nums[r]
                # if the sum larger than the target, move the right pointer
                if threesum > 0:
                    r -= 1
                # if the sum lower than the target, move the left pointer
                elif threesum < 0:
                    l += 1
                else:
                    res.append([a,nums[l],nums[r]])
                # Move the left or the right pointer to aviod duplicates
                    l += 1
                    while nums[l] == nums[l-1]and l<r:
                        l += 1
        return res
            
