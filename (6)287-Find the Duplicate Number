# TIME: O(n), SPACE:O(1)
# 2 difficulties: 1) realize that this problem need to use LINKED LIST 2) Know FLOYD'S theory
class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        slow,fast = 0,0
        while True:
            slow = nums[slow]
            fast = nums[nums[fast]]
            if slow == fast:
                break
        slow2 = 0
        while True:
            slow2 = nums[slow2]
            slow = nums[slow]
            if slow2 == slow:
                return slow
                
